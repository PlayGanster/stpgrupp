// middleware.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { isSupportedCity } from '@/config/cities';
import { getCachedCity, setCachedCity, shouldRefreshCache } from '@/lib/city-cache';
import { API_BASE_URL } from './constant/api-url';

/**
 * Middleware —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—ç—à –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç
 * GPS –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
 */
export async function middleware(request: NextRequest) {
  const { pathname, search } = request.nextUrl;
  
  console.log('\nüöÄ Middleware Triggered:', { path: pathname });

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ API
  if (shouldSkipPath(pathname)) {
    return NextResponse.next();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ –≤ URL
  const pathParts = pathname.split('/').filter(Boolean);
  const currentCity = pathParts[0];

  // –ï—Å–ª–∏ URL —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≥–æ—Ä–æ–¥ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  if (isSupportedCity(currentCity)) {
    console.log('‚úÖ Already on city page:', currentCity);
    const response = NextResponse.next();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    const cachedCity = getCachedCity(request);
    if (!cachedCity || cachedCity !== currentCity) {
      setCachedCity(response, currentCity, pathname);
      console.log('üíæ Cache updated:', currentCity);
    }
    
    return response;
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ä–æ–¥–∞ –≤ URL, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  const cachedCity = getCachedCity(request);
  
  if (cachedCity && isSupportedCity(cachedCity)) {
    console.log('üéØ Using cached city:', cachedCity);
    const newUrl = new URL(`/${cachedCity}${pathname}${search}`, request.url);
    const response = NextResponse.redirect(newUrl);
    return response;
  }

  // –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç - —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ –ú–æ—Å–∫–≤—É (–≤–º–µ—Å—Ç–æ –í—Å—è –†–æ—Å—Å–∏—è)
  console.log('üéØ No city detected, using Moscow as default');
  const newUrl = new URL('/moscow', request.url);
  const response = NextResponse.redirect(newUrl);
  setCachedCity(response, 'moscow', pathname);
  
  return response;
}

function shouldSkipPath(pathname: string): boolean {
  return (
    pathname.startsWith('/_next') || 
    pathname.startsWith('/api') || 
    pathname.startsWith('/static') ||
    pathname.includes('.') ||
    pathname.startsWith('/sitemap') ||
    pathname.startsWith('/robots') ||
    pathname.startsWith('/favicon')
  );
}

export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico|sitemap|robots.txt).*)',
  ],
};