// middleware.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { isSupportedCity } from '@/config/cities';
import { getCachedCity, setCachedCity, shouldRefreshCache } from '@/lib/city-cache';
import { getClientIP, isValidIP } from '@/lib/api-utils';
import { API_BASE_URL } from './constant/api-url';

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ API
 */
async function detectCityViaAPI(request: NextRequest): Promise<string | null> {
  const userIP = getClientIP(request);
  
  console.log('üåê City Detection Started:', {
    ip: userIP,
    isValid: isValidIP(userIP)
  });

  if (!isValidIP(userIP)) {
    console.log('‚ùå Invalid IP, skipping API call');
    return null;
  }

  try {
    const apiUrl = `${API_BASE_URL}/detect-city?ip=${userIP}`;
    console.log('üì° API Request:', apiUrl);

    const controller = new AbortController();
    const timeout = setTimeout(() => controller.abort(), 5000);

    const response = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      cache: 'no-cache',
      signal: controller.signal
    });

    clearTimeout(timeout);

    console.log('üì® API Response:', {
      status: response.status,
      ok: response.ok
    });

    if (response.ok) {
      const data = await response.json();
      console.log('üèôÔ∏è API Data:', data);
      
      if (data.success && data.normalized_city) {
        console.log('‚úÖ City Detected:', data.normalized_city);
        return data.normalized_city;
      } else {
        console.log('‚ùå API Error:', data);
      }
    } else {
      const errorText = await response.text();
      console.log('‚ùå HTTP Error:', errorText);
    }
  } catch (error: any) {
    if (error.name === 'AbortError') {
      console.log('‚è∞ API Timeout');
    } else {
      console.log('üí• API Exception:', error.message);
    }
  }

  return null;
}

/**
 * –û—á–∏—â–∞–µ—Ç –ø—É—Ç—å –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
 */
function cleanPathFromCities(pathname: string): string {
  const pathParts = pathname.split('/').filter(Boolean);
  
  // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≥–æ—Ä–æ–¥, —É–±–∏—Ä–∞–µ–º –µ–≥–æ
  if (pathParts.length > 0 && isSupportedCity(pathParts[0])) {
    return '/' + pathParts.slice(1).join('/');
  }
  
  return pathname;
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π middleware
 */
export async function middleware(request: NextRequest) {
  const { pathname, search } = request.nextUrl;
  
  console.log('\nüöÄ Middleware Triggered:', {
    path: pathname,
    search: search || '(empty)'
  });

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ API
  if (
    pathname.startsWith('/_next') || 
    pathname.startsWith('/api') || 
    pathname.startsWith('/static') ||
    pathname.includes('.') ||
    pathname.startsWith('/sitemap') ||
    pathname.startsWith('/robots')
  ) {
    return NextResponse.next();
  }

  // –û—á–∏—â–∞–µ–º –ø—É—Ç—å –æ—Ç –≥–æ—Ä–æ–¥–æ–≤ (–Ω–∞ —Å–ª—É—á–∞–π —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞)
  const cleanPath = cleanPathFromCities(pathname);
  console.log('üßπ Cleaned path:', { original: pathname, cleaned: cleanPath });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ –≤ URL (–ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏)
  const pathParts = cleanPath.split('/').filter(Boolean);
  const currentCity = pathParts[0];

  console.log('üîç Path Analysis:', {
    pathParts,
    currentCity,
    isSupported: isSupportedCity(currentCity)
  });

  // –ï—Å–ª–∏ —É–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≥–æ—Ä–æ–¥–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  if (isSupportedCity(currentCity)) {
    console.log('‚úÖ Correct city in URL:', currentCity);
    const response = NextResponse.next();
    setCachedCity(response, currentCity, cleanPath);
    return response;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –∑–∞–Ω–æ–≤–æ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è —Ç–µ—Å—Ç–∞)
  console.log('üîÑ Fresh City Detection');
  const detectedCity = await detectCityViaAPI(request);
  const targetCity = detectedCity && isSupportedCity(detectedCity) 
    ? detectedCity 
    : 'vsia_rossia';

  console.log('üéØ Detection Result:', {
    detected: detectedCity,
    final: targetCity
  });

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π URL —Å –≥–æ—Ä–æ–¥–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –ø—É—Ç—å)
  const newPath = `/${targetCity}${cleanPath === '/' ? '' : cleanPath}`;
  const newUrl = new URL(newPath + search, request.url);
  
  console.log('üîÄ Redirect:', {
    from: pathname,
    to: newUrl.toString(),
    cleanPath,
    newPath
  });

  // –†–µ–¥–∏—Ä–µ–∫—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è
  if (currentCity !== targetCity) {
    const response = NextResponse.redirect(newUrl);
    setCachedCity(response, targetCity, cleanPath);
    console.log('‚úÖ Redirecting completed\n');
    return response;
  }

  console.log('‚è≠Ô∏è No redirect needed\n');
  return NextResponse.next();
}

export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico|sitemap|robots.txt).*)',
  ],
};